Version 3.7.1:
=============
- Stability improvements

Version 3.7.0:
=============
- Providers can delete topics
	The new 'ProviderSession.deleteTopic*' interfaces allow publishers to
	free the resources associated with topics created using
	'ProviderSession.createTopic*'. See 'ProviderSession' for details.

- Support service deregistration
	Providers can now de-register services. When a registered service is
	de-registered, all topics are deleted, all subscriptions and pending
	requests are cancelled (and routed by the infrastructure to other providers,
	if available), and a ServiceStatus event containing a ServiceDeregistered
	message is delivered to the provider. When a service whose registration is
	pending is deregistered, the registration is cancelled and a ServiceStatus
	event containing a ServiceRegisterFailure message is delivered to the
	provider.

- Fine-grained service registration
	Support is provided for separate registration of the publication,
	operations (request-response), and resolution components of a service.
	This provides to ability to, for example, write a publisher and its
	corresponding resolver as entirely separate applications running in
	different processes (and different machines). See
	'ServiceRegistrationOptions.getPartsToRegister' and
	'ServiceRegistrationOptions.setPartsToRegister' for further details.

- Add sub-service code support
	Publishers can now collaborate with resolvers to route subscription
	requests based on "sub-service codes", which are integer identifiers
	between 0 and 2**24. Publishers can advertise the set of sub-service
	codes they support (and their priority relative to other publishers for
	each sub-service code) either at the time the service is registered
	(via 'ServiceRegistrationOptions::addSubServiceCodeRange') or
	dynamically over the lifetime of the publisher (via
	'ProviderSession::activateSubServiceCodeRange' and
	'ProviderSession::deactivateSubServiceCodeRange'). In responding to a
	resolution request, a resolver can set the 'subServiceCode' element of
	the 'PermissionResponse', and the subscription request will be routed
	only to a publisher that has advertised that particular sub-service
	code.

- Report errors when attempting to publish the same field multiple times
	The documentation for 'EventFormatter' has always specified undefined
	behavior if clients attempt to set the same field in a tick multiple
	times. Previous versions of the library would silently allow such usage
	(with unspecified semantics for which value would be published).
	'EventFormatter' will now detect and report most instances of this type
	of misuse.

- Topic strings can be marked as not requiring resolution
	Clients with access to fully-resolved topic strings can now use the
	'SubscriptionList::addResolved' family of functions to advise the
	Bloomberg infrastructure that such topics do not require resolution. It
	is at the discretion of the infrastructure whether or not such advice
	actually allows avoidance of the resolution phase of subscription.

- New session option to disable keep-alive mechanism
	Clients can now use the 'SessionOptions::setKeepAliveEnabled' function
	to disable or enable a session's keep-alive mechanism.  In addition,
	the 'SessionOptions::keepAliveEnabled' function can be used to query
	the enabled state of the keep-alive mechanism.

- Addition of configuration properties for blpapi log files
	Two configuration properties have been added to control the management of
	log files:
	1. com.bloomberglp.blpapi.logFileLimit
		This property sets the (approximate) maximum size of each
		individual log file; when the current log file exceeds this
		limit the file is rolled over and a new file is created. The
		default value is 10485760 (10 MB). Setting this property to 0
		gives an unlimited file size and no rollover.
	2. com.bloomberglp.blpapi.logFileCount
		This property sets the number of rollover files to keep; if
		the current log file is rolled over and this many rollovers
		already exist, the oldest rollover file is removed.
		The default value is 10. Note that this property will not have
		any effect if 'com.bloomberglp.blpapi.logFileLimit' is set to
		'0'.
	As with other logging properties, these can be set as VM options or as
	'java.util.logging' properties.

- Renaming 'com.bloomberglp.blpapi.logfolder' to
 'com.bloomberglp.blpapi.logFolder'
	For the sake of consistency, a 'com.bloomberglp.blpapi.logFolder'
	property has been introduced as a preferred synonym for
	'com.bloomberglp.blpapi.logfolder'. The latter name is now
	deprecated.

- Drop support for V2 platform
	The SDK no longer supports publishing to Platform versions before 3.0.0.

- New connection strategy when multiple hosts are provided
	The SDK now initiates connections to all provided hosts when a session is
	started, instead of waiting for loss of the primary connection to connect
	to another host for failover.

- 'Service.createAdminEvent' has been deprecated
	The API 'Service.createAdminEvent()' has been deprecated; callers should
	use 'Service.createPublishEvent()' instead.

- Stability improvements

Version 3.6.2:
=============
- Stability improvements

Version 3.6.1:
=============
- Stability improvements

Version 3.6.0:
=============
- Publishers can clear internal cached values
	This version adds support to allow publishers to publish null values
	by calling 'EventFormatter.setElementNull'. Publishing null clears any
	value for that field currently cached by the data distribution platform.

- Demonstrate a valid behavior on DataLoss
	Sample implementation of application processing DataLoss message added
	to SubscriptionWithEventHandlerExample. Note that this behavior may not
	be the most appropriate behavior for your application.

- SecurityLookupExample added
	New example has been added to demonstrate the use of Ticker Lookup
	service, //blp/instruments.

- Resubscribe with resubscription ID
	One more method in Session is provided to support resubscription with
	a user-specified resubscription ID. This resubscription ID appears in
	the subscription status messages('SubscriptionStarted' and
	'SubscriptionFailure') associated with this resubscription request,
	differentiating them from status messages for other resubsubscriptions
	and from status messages from the initial subscription.

- Stability improvements

Version 3.5.1:
=============
- Stability improvements

Version 3.5.0:
=============
- Deliver DataLoss when library drops events
	The library drops events when the number of events outstanding for
	delivery exceeds the specified threshold controlled by SessionOptions
	maxEventQueueSize.

	A new ADMIN message of type DataLoss will be delivered to notify the
	client about lost data. The correlationID property attached to the
	DataLoss message identifies the affected subscription.

- High-precision time
	The Datetime type has been extended with support for receiving
	high-precision fractional seconds, with accessors for the
	fraction-of-second as milliseconds, microseconds, nanoseconds, and
	picoseconds, with these accessors ignoring/truncating higher-resolution
	parts as necessary.

- Stability improvements

Version 3.4.8:
=============
- Stability improvements

Version 3.4.7:
=============
- Performance improvement in default configuration
	The default value of SessionOption property maxEventQueueSize has been
	changed from 512 to 10000.

- Stability improvements

Version 3.4.6:
=============
- Support fragmented messages
	Users can call Message.fragmentType() to determine if a message is a
	fragment of a larger message. Most messages won't be fragmented so the
	above method will return Fragment.NONE. Consuming application should be
	prepared to receive a Fragment.START before receiving Fragment.END
	in which case previously received message fragments (start and any
	intermediate fragments) should be discarded.

- Introduce new dead peer detection mechanism
	The new functionality is controlled by two parameters: inactivity time
	and response timeout. Inactivity time controls the amount of time
	without any read activity on the connection before the library will ping
	the peer. The peer will be declared "dead" if ping response (or other
	data) is not received within response timeout interval after the ping.
	The behavior can be controlled using following SessionOption
	properties:
			DefaultKeepAliveInactivityTime
			DefaultKeepAliveResponseTimeout
	This feature is only available if connected to a compatible server.

- Per-connection authorization implemented inside the library
	Applications are no longer required to send an authorization request
	per each backend they intend to use. This functionality is now provided
	by the library.

- Clarify requirements for starting Sessions with external dispatcher
	Attempts to start a Session/ProviderSession configured with an external
	dispatcher will now fail unless the provided EventDispatcher object has
	already been started. This change is expected to help users who had
	inadvertently created sessions with a non-started EventDispatcher;
	sessions created this way would not emit any events.

- PagePublisherWithPermissioning example removed
	PagePublisherWithPermissioning example was consolidated into
	PagePublisherExample which was enhanced to handle PermissionRequests.

- ContributionsPageExample can publish on user specified topic
	In ContributionsPageExample, users can specify the topic to publish
	using the "-t" option at command line.

- Stability improvements

Version 3.4.5:
=============
- Support multiple simultaneous active connections to backend servers
	ProviderSession.registerService request will announce published services
	through all conencted backends. A new SERVICE_STATUS message was
	introduced: ServiceAvailabilityInfo to inform the publishing application
	about the current list of backends that carry their service.

	Applications will be required to send an authorization request per
	each backend they intend to use (it's recommended to send as many as
	the number of configured backends)

- Support publishing request/response services
	Publishing applications can now register to publish interactive
	services: requests from clients will be routed to such publishers, who
	would create a response with Service.createResponseEvent() and send it
	back with ProviderSession.sendResponse(). Included
	RequestServiceExample demonstrates an implementation of both client and
	server applications.

- Support user-provided sequence numbers
	The presence of sequence numbers in published events will enable a
	seamless (data loss free) failover in case of a publisher loss.

	EventFormatter was extended with new overloads for appendMessage() and
	appendRecapMessage() which take a sequence number as one of the arguments
	where added to allow publishers insert sequence numbers into message they
	publish.

- Topic-level permissioning
	Publishers can report the list of EIDs and the permissioning service
	information per Topic in PermissionResponse (in a response to
	PermissionRequest sent by Platform on behalf of a subscriber). The
	Platform will continuously monitor entitlements of that subscriber to
	ensure eligibility to receive the data on the Topic.  In case the
	permissions of the subscriber make him ineligible, the Platform will
	terminate that subscription.

- Stability improvements

Version 3.4.3:
=============
- Connection timeout configurable via SessionOptions
	The default connection timout changed to be 5 sec. Users can change
	that value using SessionOptions::setConnectTimeout().

- Expose more EMRS information to users
	Added userName, appName, serviceName and deviceAddress to permission
	request.

- Stability improvements

Version 3.4.1:
==============
- Support concurrent openService & registerService operations
	Multiple ProviderSession.openService() & ProviderSession.registerService()
	operations can run concurrently (either if started explicitly or
	implicitly via ProviderSession.resolve(), ProviderSession.createTopics(),
	and Session.subscribe() calls).

- Differentiate log messages based on session id in the log file
	When a single process has more than one active session, log messages coming
	from different sessions are tagged with the session id.

- Topic.isValid() has been removed
	When a topic does not exist we return null instead of an empty invalid
	Topic object.

- Make connection timeout consistent with C++ implementation
	Session's TCP connect will timeout after 2 seconds in case destination
	host is unreachable (as in other SDKs).

Version 3.4.0:
==============
- All new ProviderSession, independent from Sesssion:
	Initial publishing implementation offered ProviderSession which was a
	subclass of Session. Thus it was possible to do subscriptions on
	ProviderSession. It's no longer the case: ProviderSession and Session
	are no longer related; new classes provide a true "writer" and "reader"
	interfaces respectively. New session classes share a common base -
	AbstractSession, which defines interfaces for session control, and
	user authorization.

- Multiple publisher support:
	Multiple publishers for the same feed/topic are now supported, providing
	redundancy/fan-in services.
	- Publisher group ID: When registering a service you now can specify
	  a group ID. If not specified, each provider session will have a
	  unique group ID (default behavior). The group ID is used for
	  clustering together a set of service publishers.
	  The group ID controls the behavior of the multiple publishers. Using
	  the same group ID for a set of publishers you can provide redundancy
	  between the publishers. Using a different group IDs users can
	  implement publisher fan-in (for the same or different topics).

	- Redundancy: When publishers are registered with the same group ID, the
	  platform will manage the list of publishers and will activate the
	  feed from only one of them at any given time.
	  In order to support this feature two new TOPIC_STATUS messages exist:
	  TopicActivated & TopicDeactivated.
	  A publisher should start publishing on a given topic only after a
	  TopicActivated message has been received. When a publisher receives
	  the TopicDeactivated notification message, it should stop publishing
	  on the topic.
	  All information that is streamed from a publisher before it received
	  the TopicActivated message, or after it received the
	  TopicDeactivated message will be discarded by the platform.
	  Publishers on the same group are required to publish identical tick
	  streams.

	- Topic fan-in: Information from different group IDs publishers will be
	  combined in to one stream torward the subscribers. It's up to the
	  publishers to make sure that different group IDs will not publish
	  redundant information.
	  Setting the group ID:
	  ...
	  ServiceRegistrationOptions options = new ServiceRegistrationOptions();
	  options.setGroupId("SomeGroupID");
	  providerSession.registerService(serviceName, identity, options);
	  ...

- Failover support for both publisher- and subscriber-type clients
	A session can be provided with a list of platform servers. Depending
	on the session configuration, if the platform server goes down the
	session will try to reconnect to the next platform server in the list.
	By default, the auto restart option is disabled, to enable it do:
	...
	SessionOptions options = new SessionOptions();
	options.setAutoRestartOnDisconnection(true);
	ProviderSession session = new ProviderSession(options, myEventHandler);
	...

	Users should expect that sometimes (the worst case scenario) the
	library might not be able to failover some published services or topics
	to the backup system and will notify the user with
	ServiceFailoverError and TopicFailoverError messages as appropriate.

- Topic creation/resolution:
	The API ProviderSession.createTopic() has been deprecated.

	Topic resolution and management has moved from the library to the
	platform server, thus each time the library is trying to resolve or
	create a topic, a message is sent to the platform. In order to save in
	bandwidth and response time the new API supports creation of multiple
	topics in a single call.

	Once a topic has been created it is cached by the library (in the
	process memory). In order to get a reference to a cached instance
	using a message object, the API ProviderSession.getTopic() was introduced.

	In order to maintain backward compatibility, the deprecated API
	ProviderSession.createTopic() can still be used, but it assumes that the
	topic object was previously resolved & created using either
	ProviderSession.createTopics() API. In "compat33x" mode it's sufficient to
	call ProviderSession.resolve[Async]() which does both resolving and topic
	creation with the platform. As a result, the ProviderSession.createTopic()
	API is now a local call (i.e. the library does not interact with the
	platform).

	When creating a topic using either ProviderSession.createTopics() API or
	ProviderSession.resolve()/createTopics() API, the library generates the
	following events to the client in case of a successful operation:
	- RESOLUTION_STATUS event with ResolutionSuccess message
	- TOPIC_STATUS event with TopicCreated and TopicActivated (or
	  TopicDeactivated, if the provider was not elected primary for the
	  group) messages.

- Topic recap:
	A topic recap message, is a message generated by the client
	application and should include ALL the current information for the
	topic (the platform cache will get reset to whatever values came in
	the recap message, empty fields will clear cache values; that's
	different from a regular tick where absent field values mean "no
	change"). There are two logical types of a topic recap message:

	- Solicited topic recap message: The platform server can decide that
	  the information it has stored in cache is not valid anymore, in that
	  case the publisher will receive a TOPIC_STATUS event with TopicRecap
	  message. The message will include a correlation ID that should be
	  incorporated into the Topic recap response.
	...
	Topic topic = providerSession.getTopic(msg);
	CorrelationID cid = msg.correlationID();
	Event event = service.createPublishEvent();
	EventFormatter eventFormatter = new EventFormatter(event);
	eventFormatter.appendRecapMessage(topic, cid);
	...

	- Unsolicited topic recap message:
	  The client application can decide on its own (based on its own internal
	  logic) to send a recap message to the platform.  Sending a topic
	  recap message is done the same way as sending a regular update
	  message, with two changes: When appending a message to the event,
	  you should use the EventFormatter.appendRecapMessage() API (vs the
	  EventFormatter.appendMessage()) and, all fields of the topic recap
	  message should be filled.  Here is a code scrap to see how to send a
	  recap message:
	...
	Event event = service.createPublishEvent();
	EventFormatter eventFormatter = new EventFormatter(event);
	eventFormatter.appendRecapMessage(topic, null);
	...

- Initial paint events:
	Publishing applications implementing "initial paint" functionality
	must do that by sending a recap message as descibed above; formatting
	these events with EventFormatter.appendMessage() is not supported. The
	recap will be requested by the platform if the service's metadata
	specifies that publishers supports recaps (see discussion on solicited
	topic recap messages above). Otherwise publishers can provide the
	"initial paint" by sending an unsolicited recap of the topic in
	response to TopicActivated notification.

- Dynamically updating entitlements in Identity
	Authorization request no longer completes when Identity is authorized,
	AuthorizationSuccess message will arrive in a PARTIAL_RESPONSE event.
	The authorization request will remain outstanding delivering
	entitlements updates.

- Support BBCOMM auto start on 64-bit OS
	BBCOMM will be autostarted in DAPI mode from Java applications running in
	64-bit JVM on Windows platform with assistance of native 64-bit library
	blpdapisup_64.dll.

- Identity extended to include user's "seat" type
	An authorized Identity object can detail whether the authenticated user is
	a BLP Professional Service user or not.

- PermissionRequest extended to support non-user subscribers
	PermissionRequest message have been extended to supply "seat" type
	information of the subscriber and an application ID (if subscriber used
	application authentication).

- Support custom loggers
	BLPAPI now supports logging through customer-provided logging callback.

- Connection up/down notifications
	Added two new message types to SessionStatus event type:
	SessionConnectionUp and SessionConnectionDown. This way the lifetime
	of the connection to the backend server and the lifetime of the
	session can be reported independently as connections to backend can
	drop/recover without having the library terminate the session.
